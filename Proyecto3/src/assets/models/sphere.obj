pub fn generate_sphere(radius: f32, segments: usize, material: Material) -> Self {
    let mut vertices = Vec::new();
    let mut indices = Vec::new();

    for i in 0..segments {
        for j in 0..segments {
            let theta = (i as f32 / segments as f32) * std::f32::consts::PI;
            let phi = (j as f32 / segments as f32) * 2.0 * std::f32::consts::PI;

            let x = radius * theta.sin() * phi.cos();
            let y = radius * theta.cos();
            let z = radius * theta.sin() * phi.sin();

            vertices.push(Vec3::new(x, y, z));
            if i < segments - 1 && j < segments - 1 {
                let a = i * segments + j;
                let b = a + 1;
                let c = a + segments;
                let d = c + 1;

                indices.push(a as u32);
                indices.push(b as u32);
                indices.push(c as u32);

                indices.push(b as u32);
                indices.push(d as u32);
                indices.push(c as u32);
            }
        }
    }

    Self {
        center: Vec3::new(0.0, 0.0, 0.0),
        radius,
        material,
    }
}
